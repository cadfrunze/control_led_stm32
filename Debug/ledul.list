
ledul.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000204  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000398  080003a0  000103a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000398  08000398  000103a0  2**0
                  CONTENTS
  4 .ARM          00000000  08000398  08000398  000103a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000398  080003a0  000103a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000398  08000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800039c  0800039c  0001039c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003a0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003a0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000014b  00000000  00000000  00010413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000085  00000000  00000000  0001055e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000105e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  00010630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000019a6  00000000  00000000  0001065d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000678  00000000  00000000  00012003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007078  00000000  00000000  0001267b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000058  00000000  00000000  000196f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  0001974c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000380 	.word	0x08000380

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000380 	.word	0x08000380

080001d4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b089      	sub	sp, #36	; 0x24
 80001d8:	af00      	add	r7, sp, #0
    //RCC register for enabling GPIOA
	uint32_t*  pClkCtrlReg = (uint32_t*)(0x40023800 + 0x30);
 80001da:	4b3b      	ldr	r3, [pc, #236]	; (80002c8 <main+0xf4>)
 80001dc:	61bb      	str	r3, [r7, #24]
	uint32_t* pGPIOAModeReg = (uint32_t*)(0x40020000 + 0x00);
 80001de:	4b3b      	ldr	r3, [pc, #236]	; (80002cc <main+0xf8>)
 80001e0:	617b      	str	r3, [r7, #20]
	uint32_t*  pGPIOAOoutDataReg = (uint32_t*)(0x40020000 + 0x14);
 80001e2:	4b3b      	ldr	r3, [pc, #236]	; (80002d0 <main+0xfc>)
 80001e4:	613b      	str	r3, [r7, #16]

	// Adresele de registre pentru configurarea pinilor GPIOB
	uint32_t* pClkCtrlRegB = (uint32_t*)(0x40023800 + 0x44);
 80001e6:	4b3b      	ldr	r3, [pc, #236]	; (80002d4 <main+0x100>)
 80001e8:	60fb      	str	r3, [r7, #12]
	uint32_t* pGPIOBModeReg = (uint32_t*)(0x40020400 + 0x00);
 80001ea:	4b3b      	ldr	r3, [pc, #236]	; (80002d8 <main+0x104>)
 80001ec:	60bb      	str	r3, [r7, #8]
	uint32_t* pGPIOBInputDataReg = (uint32_t*)(0x40020400 + 0x10);
 80001ee:	4b3b      	ldr	r3, [pc, #236]	; (80002dc <main+0x108>)
 80001f0:	607b      	str	r3, [r7, #4]

	uint32_t delay = 0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	61fb      	str	r3, [r7, #28]
	//int randNum;

	//------------GPIOA---------------------------------------------
	// enable GPIOA
	uint32_t mask = 0x01 << 0;
 80001f6:	2301      	movs	r3, #1
 80001f8:	603b      	str	r3, [r7, #0]
	*pClkCtrlReg |= mask;
 80001fa:	69bb      	ldr	r3, [r7, #24]
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	431a      	orrs	r2, r3
 8000202:	69bb      	ldr	r3, [r7, #24]
 8000204:	601a      	str	r2, [r3, #0]

	// set GPIOA pin 5 as output
	mask = 0x01 << 10;
 8000206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020a:	603b      	str	r3, [r7, #0]
	*pGPIOAModeReg &= ~(0x3 <<10);
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000214:	697b      	ldr	r3, [r7, #20]
 8000216:	601a      	str	r2, [r3, #0]
	*pGPIOAModeReg |= mask;
 8000218:	697b      	ldr	r3, [r7, #20]
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	431a      	orrs	r2, r3
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	601a      	str	r2, [r3, #0]


	// set GPIOA pin 5 HIGH
	mask = 0x01 << 5;
 8000224:	2320      	movs	r3, #32
 8000226:	603b      	str	r3, [r7, #0]
	*pGPIOAOoutDataReg |= mask;
 8000228:	693b      	ldr	r3, [r7, #16]
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	431a      	orrs	r2, r3
 8000230:	693b      	ldr	r3, [r7, #16]
 8000232:	601a      	str	r2, [r3, #0]
	// Enable GPIOA pin 13 (PA13) ca intrare
	//*pGPIOAModeReg &= ~(0x3 << (2 * 13));

	// -------------GPIOB--------------------------------------------
	// Activează ceasul pentru GPIOB
	*pClkCtrlRegB |= (0x01 << 1);
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f043 0202 	orr.w	r2, r3, #2
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	601a      	str	r2, [r3, #0]

	// Configurează GPIOB pin 13 (PB13) ca intrare
	*pGPIOBModeReg &= ~(0x3 << (2 * 13));  // 2 biți/pin, PB13
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	601a      	str	r2, [r3, #0]
	*/


	while (1){

		if ((*pGPIOBInputDataReg & (0x01 << 13)) != 0) {
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000254:	2b00      	cmp	r3, #0
 8000256:	d01a      	beq.n	800028e <main+0xba>
			for (delay =0; delay < 1000000; delay++);
 8000258:	2300      	movs	r3, #0
 800025a:	61fb      	str	r3, [r7, #28]
 800025c:	e002      	b.n	8000264 <main+0x90>
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	3301      	adds	r3, #1
 8000262:	61fb      	str	r3, [r7, #28]
 8000264:	69fb      	ldr	r3, [r7, #28]
 8000266:	4a1e      	ldr	r2, [pc, #120]	; (80002e0 <main+0x10c>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d9f8      	bls.n	800025e <main+0x8a>
			*pGPIOAOoutDataReg |= mask;
 800026c:	693b      	ldr	r3, [r7, #16]
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	431a      	orrs	r2, r3
 8000274:	693b      	ldr	r3, [r7, #16]
 8000276:	601a      	str	r2, [r3, #0]
			for (delay =0; delay < 1000000; delay++);
 8000278:	2300      	movs	r3, #0
 800027a:	61fb      	str	r3, [r7, #28]
 800027c:	e002      	b.n	8000284 <main+0xb0>
 800027e:	69fb      	ldr	r3, [r7, #28]
 8000280:	3301      	adds	r3, #1
 8000282:	61fb      	str	r3, [r7, #28]
 8000284:	69fb      	ldr	r3, [r7, #28]
 8000286:	4a16      	ldr	r2, [pc, #88]	; (80002e0 <main+0x10c>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d9f8      	bls.n	800027e <main+0xaa>
 800028c:	e7de      	b.n	800024c <main+0x78>
		 	 }
		else{
			for (delay =0; delay < 1000000; delay++);
 800028e:	2300      	movs	r3, #0
 8000290:	61fb      	str	r3, [r7, #28]
 8000292:	e002      	b.n	800029a <main+0xc6>
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	3301      	adds	r3, #1
 8000298:	61fb      	str	r3, [r7, #28]
 800029a:	69fb      	ldr	r3, [r7, #28]
 800029c:	4a10      	ldr	r2, [pc, #64]	; (80002e0 <main+0x10c>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d9f8      	bls.n	8000294 <main+0xc0>
			*pGPIOAOoutDataReg &= ~mask;
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	43db      	mvns	r3, r3
 80002aa:	401a      	ands	r2, r3
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	601a      	str	r2, [r3, #0]
			for (delay =0; delay < 1000000; delay++);
 80002b0:	2300      	movs	r3, #0
 80002b2:	61fb      	str	r3, [r7, #28]
 80002b4:	e002      	b.n	80002bc <main+0xe8>
 80002b6:	69fb      	ldr	r3, [r7, #28]
 80002b8:	3301      	adds	r3, #1
 80002ba:	61fb      	str	r3, [r7, #28]
 80002bc:	69fb      	ldr	r3, [r7, #28]
 80002be:	4a08      	ldr	r2, [pc, #32]	; (80002e0 <main+0x10c>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d9f8      	bls.n	80002b6 <main+0xe2>
		if ((*pGPIOBInputDataReg & (0x01 << 13)) != 0) {
 80002c4:	e7c2      	b.n	800024c <main+0x78>
 80002c6:	bf00      	nop
 80002c8:	40023830 	.word	0x40023830
 80002cc:	40020000 	.word	0x40020000
 80002d0:	40020014 	.word	0x40020014
 80002d4:	40023844 	.word	0x40023844
 80002d8:	40020400 	.word	0x40020400
 80002dc:	40020410 	.word	0x40020410
 80002e0:	000f423f 	.word	0x000f423f

080002e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e4:	480d      	ldr	r0, [pc, #52]	; (800031c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ec:	480c      	ldr	r0, [pc, #48]	; (8000320 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ee:	490d      	ldr	r1, [pc, #52]	; (8000324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <LoopForever+0xe>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f4:	e002      	b.n	80002fc <LoopCopyDataInit>

080002f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fa:	3304      	adds	r3, #4

080002fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000300:	d3f9      	bcc.n	80002f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000302:	4a0a      	ldr	r2, [pc, #40]	; (800032c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000304:	4c0a      	ldr	r4, [pc, #40]	; (8000330 <LoopForever+0x16>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000308:	e001      	b.n	800030e <LoopFillZerobss>

0800030a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800030c:	3204      	adds	r2, #4

0800030e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000310:	d3fb      	bcc.n	800030a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000312:	f000 f811 	bl	8000338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000316:	f7ff ff5d 	bl	80001d4 <main>

0800031a <LoopForever>:

LoopForever:
  b LoopForever
 800031a:	e7fe      	b.n	800031a <LoopForever>
  ldr   r0, =_estack
 800031c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000324:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000328:	080003a0 	.word	0x080003a0
  ldr r2, =_sbss
 800032c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000330:	2000001c 	.word	0x2000001c

08000334 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000334:	e7fe      	b.n	8000334 <ADC_IRQHandler>
	...

08000338 <__libc_init_array>:
 8000338:	b570      	push	{r4, r5, r6, lr}
 800033a:	4d0d      	ldr	r5, [pc, #52]	; (8000370 <__libc_init_array+0x38>)
 800033c:	4c0d      	ldr	r4, [pc, #52]	; (8000374 <__libc_init_array+0x3c>)
 800033e:	1b64      	subs	r4, r4, r5
 8000340:	10a4      	asrs	r4, r4, #2
 8000342:	2600      	movs	r6, #0
 8000344:	42a6      	cmp	r6, r4
 8000346:	d109      	bne.n	800035c <__libc_init_array+0x24>
 8000348:	4d0b      	ldr	r5, [pc, #44]	; (8000378 <__libc_init_array+0x40>)
 800034a:	4c0c      	ldr	r4, [pc, #48]	; (800037c <__libc_init_array+0x44>)
 800034c:	f000 f818 	bl	8000380 <_init>
 8000350:	1b64      	subs	r4, r4, r5
 8000352:	10a4      	asrs	r4, r4, #2
 8000354:	2600      	movs	r6, #0
 8000356:	42a6      	cmp	r6, r4
 8000358:	d105      	bne.n	8000366 <__libc_init_array+0x2e>
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000360:	4798      	blx	r3
 8000362:	3601      	adds	r6, #1
 8000364:	e7ee      	b.n	8000344 <__libc_init_array+0xc>
 8000366:	f855 3b04 	ldr.w	r3, [r5], #4
 800036a:	4798      	blx	r3
 800036c:	3601      	adds	r6, #1
 800036e:	e7f2      	b.n	8000356 <__libc_init_array+0x1e>
 8000370:	08000398 	.word	0x08000398
 8000374:	08000398 	.word	0x08000398
 8000378:	08000398 	.word	0x08000398
 800037c:	0800039c 	.word	0x0800039c

08000380 <_init>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr

0800038c <_fini>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr
